name: Terraform Apply

on:
  workflow_call:
    inputs:
      regions:
        description: "A JSON Array containing a list of AWS regions to publish to"
        required: true
        type: string
      ecr_repository:
        description: "The ECR repository to publish to"
        required: true
        type: string
      profile:
        description: "The AWS profile to use"
        required: true
        type: string
      docker_file_path:
        description: "The path to the Dockerfile"
        required: false
        type: string
        default: ./Dockerfile
      docker_context_path:
        description: "The path to the docker context"
        required: false
        type: string
        default: .
      docker_target:
        description: "The target to build"
        required: false
        type: string
      login_to_ghcr:
        description: "Login to GHCR"
        required: false
        type: boolean
        default: true
      platforms: 
        description: "Platforms to publish to."
        required: false
        type: string
        default: |
          linux/amd64
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "The AWS Access Key ID used during publish and deploy."
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS Secret Access Key used during publish and deploy."
        required: true
      GITHUB_PAT:
        description: "A GitHub access token that has repo and read:packages scopes"
        required: false
      BUILD_ARGS:
        description: "Docker image build arguments"
        required: false
    outputs:
      tag:
        description: "The image tag"
        value: ${{ jobs.build-and-publish.outputs.tag }}

jobs:

  build-and-publish:
    name: 'Build & Publish'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        region: ${{ fromJson(inputs.regions) }}
        profile: [ "${{ inputs.profile }}" ]
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ matrix.region }}"
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to ghcr.io
        if: ${{ inputs.login_to_ghcr }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_PAT }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: "${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}"
          tags: |
            type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push to ECR
        uses: docker/build-push-action@v2
        with:
          # All layers should be cached to optimize for multi-environment deploys
          # Can't cache locally. Blocked by https://github.com/docker/build-push-action/issues/252
          #cache-from: type=local,src=/tmp/.buildx-cache
          #cache-to: type=local,dest=/tmp/.buildx-cache
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,dest=/tmp/.buildx-cache-new
          context: "${{ inputs.docker_context_path }}"
          file: "${{ inputs.docker_file_path }}"
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          target: ${{ inputs.docker_target }}
          build-args: ${{ secrets.BUILD_ARGS }}
