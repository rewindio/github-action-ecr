name: Terraform Apply

on:
  workflow_call:
    inputs:
      deploy_matrix:
        description: "A JSON list of objects, each specifying the region, ecr_repository and workspace (terraform)."
        required: true
        type: string
      profile:
        description: "The AWS profile to use"
        required: true
        type: string
      terraform_dir:
        description: "The path to the terraform files"
        required: false
        type: string
        default: ./terraform
      docker_file_path:
        description: "The path to the Dockerfile"
        required: false
        type: string
        default: ./Dockerfile
      docker_context_path:
        description: "The path to the docker context"
        required: false
        type: string
        default: .
      docker_target:
        description: "The target to build"
        required: false
        type: string
      login_to_ghcr:
        description: "Login to GHCR"
        required: false
        type: boolean
        default: true
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "The AWS Access Key ID used during publish and deploy."
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS Secret Access Key used during publish and deploy."
        required: true
      GITHUB_PAT:
        description: "A GitHub access token that has repo and read:packages scopes"
        required: false
      BUILD_ARGS:
        description: "Docker image build arguments"
        required: false

jobs:

  build-and-publish:
    name: 'Build & Publish'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          ${{ fromJson(inputs.deploy_matrix) }}
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ matrix.region }}"
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to ghcr.io
        if: ${{ inputs.login_to_ghcr }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_PAT }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: "${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repository }}"
          tags: |
            type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push to ECR
        uses: docker/build-push-action@v2
        with:
          # All layers should be cached to optimize for multi-environment deploys
          # Can't cache locally. Blocked by https://github.com/docker/build-push-action/issues/252
          #cache-from: type=local,src=/tmp/.buildx-cache
          #cache-to: type=local,dest=/tmp/.buildx-cache
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,dest=/tmp/.buildx-cache-new
          context: "${{ inputs.docker_context_path }}"
          file: "${{ inputs.docker_file_path }}"
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          target: ${{ inputs.docker_target }}
          build-args: ${{ secrets.BUILD_ARGS }}

  deploy:
    name: 'Deploy' 
    needs: [build-and-publish]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          ${{ fromJson(inputs.deploy_matrix) }}
    env:
      AWS_SHARED_CREDENTIALS_FILE: /tmp/ac

    steps:

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          submodules: 'true'
          token: ${{ secrets.GITHUB_PAT }} # Needed for private submodules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ matrix.region }}"

      - name: Set terraform workspace
        run: echo TF_WORKSPACE="${{ matrix.workspace }}" >> $GITHUB_ENV

      - name: Set varfile
        id: tfvars
        run: |
          echo "::set-output name=tfvar_file::tfvars/${{ inputs.profile }}/${{ matrix.workspace }}.tfvars"

      # Allow for private terraform modules to be initialized
      - name: Setup Git Config
        run: |
          git config --global \
            url."https://oauth2:${{ secrets.GITHUB_PAT }}@github.com".insteadOf https://github.com

      - name: Setup AWS credentials
        run: |
          cat <<EOF >> "$AWS_SHARED_CREDENTIALS_FILE"
          [${{ inputs.profile }}]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Set terraform version
        id: set-terraform-version
        run: echo "::set-output name=terraform-version::$(cat .terraform-version)"

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.terraform-version}}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          backend_file=backend/${{ inputs.profile }}.tfvars
          echo "::set-output name=backend_file::$backend_file"
          terraform init -backend-config "$backend_file"

      - name: Terraform Apply
        id: apply
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          set -xo pipefail
          terraform apply -no-color \
            -var "app_image_reference=${{ needs.build-and-publish.outputs.tag }}" \
            -var-file ${{ steps.init.outputs.backend_file }} \
            -var-file ${{ steps.tfvars.outputs.tfvar_file }} \
            -auto-approve |& tee terraform-${{ env.TF_WORKSPACE }}-apply-stdout.txt

      - name: Cleanup AWS Credentials
        if: always()
        run: |
          rm -f "$AWS_SHARED_CREDENTIALS_FILE"
